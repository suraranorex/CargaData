///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace CardaData.PC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The PlanesPorProductor recording.
    /// </summary>
    [TestModule("56bee8fa-e9bd-4b16-bdd1-adcc1aac3066", ModuleType.Recording, 1)]
    public partial class PlanesPorProductor : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::CardaData.CardaDataRepository repository.
        /// </summary>
        public static global::CardaData.CardaDataRepository repo = global::CardaData.CardaDataRepository.Instance;

        static PlanesPorProductor instance = new PlanesPorProductor();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public PlanesPorProductor()
        {
            CodPAS = "2344";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static PlanesPorProductor Instance
        {
            get { return instance; }
        }

#region Variables

        string _CodPAS;

        /// <summary>
        /// Gets or sets the value of variable CodPAS.
        /// </summary>
        [TestVariable("9d7fceac-8701-4979-a316-d49c26622db5")]
        public string CodPAS
        {
            get { return _CodPAS; }
            set { _CodPAS = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Ambiente.
        /// </summary>
        [TestVariable("8bb4d90e-0931-42e5-a69e-df43fdd1058a")]
        public string Ambiente
        {
            get { return repo.Ambiente; }
            set { repo.Ambiente = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Fila.
        /// </summary>
        [TestVariable("e40a34e3-ace0-4418-a7ed-2024b36ea458")]
        public string Fila
        {
            get { return repo.Fila; }
            set { repo.Fila = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Canal.
        /// </summary>
        [TestVariable("319fd79e-d30a-41ce-8566-aaf9f89bb56f")]
        public string Canal
        {
            get { return repo.Canal; }
            set { repo.Canal = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable TipoVivienda.
        /// </summary>
        [TestVariable("53b95d54-be4d-4cc7-869d-b63bd2b2ba32")]
        public string TipoVivienda
        {
            get { return repo.TipoVivienda; }
            set { repo.TipoVivienda = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Plan.
        /// </summary>
        [TestVariable("7b9a1314-0614-4a9d-b8a4-d55c810ad2ca")]
        public string Plan
        {
            get { return repo.Plan; }
            set { repo.Plan = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.lbl_PlanesPorProductor'", repo.ApplicationUnderTest.lbl_PlanesPorProductorInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.lbl_PlanesPorProductorInfo.WaitForExists(30000);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.txt_CodProductorPlanesProductor' at Center.", repo.ApplicationUnderTest.txt_CodProductorPlanesProductorInfo, new RecordItemIndex(1));
            //repo.ApplicationUnderTest.txt_CodProductorPlanesProductor.Click();
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Btn_AgregarRegistro' at Center.", repo.ApplicationUnderTest.Btn_AgregarRegistroInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.Btn_AgregarRegistro.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.FilaRegistrarProductor'", repo.ApplicationUnderTest.FilaRegistrarProductorInfo, new ActionTimeout(30000), new RecordItemIndex(3));
            repo.ApplicationUnderTest.FilaRegistrarProductorInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.txt_CanalProductor' at Center.", repo.ApplicationUnderTest.txt_CanalProductorInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.txt_CanalProductor.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'ApplicationUnderTest.Select_Canal' at Center.", repo.ApplicationUnderTest.Select_CanalInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.Select_Canal.MoveTo();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Select_Canal' at Center.", repo.ApplicationUnderTest.Select_CanalInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.Select_Canal.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 40s to not exist. Associated repository item: 'ApplicationUnderTest.Copy_of_txt_CodPAS'", repo.ApplicationUnderTest.Copy_of_txt_CodPASInfo, new ActionTimeout(40000), new RecordItemIndex(8));
            repo.ApplicationUnderTest.Copy_of_txt_CodPASInfo.WaitForNotExists(40000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.txt_CodPAS' at Center.", repo.ApplicationUnderTest.txt_CodPASInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.txt_CodPAS.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$CodPAS' with focus on 'ApplicationUnderTest.txt_CodPAS'.", repo.ApplicationUnderTest.txt_CodPASInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.txt_CodPAS.PressKeys(CodPAS);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'ApplicationUnderTest.Copy_of_Vivienda_Permanente'", repo.ApplicationUnderTest.Copy_of_Vivienda_PermanenteInfo, new ActionTimeout(30000), new RecordItemIndex(11));
            repo.ApplicationUnderTest.Copy_of_Vivienda_PermanenteInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.txt_TipoVivienda' at Center.", repo.ApplicationUnderTest.txt_TipoViviendaInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.txt_TipoVivienda.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(13));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'ApplicationUnderTest.Select_TipoVivienda' at Center.", repo.ApplicationUnderTest.Select_TipoViviendaInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.Select_TipoVivienda.MoveTo();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Select_TipoVivienda' at Center.", repo.ApplicationUnderTest.Select_TipoViviendaInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.Select_TipoVivienda.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 40s to not exist. Associated repository item: 'ApplicationUnderTest.Copy_of_Select_Plan'", repo.ApplicationUnderTest.Copy_of_Select_PlanInfo, new ActionTimeout(40000), new RecordItemIndex(16));
            repo.ApplicationUnderTest.Copy_of_Select_PlanInfo.WaitForNotExists(40000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.txt_Plan' at Center.", repo.ApplicationUnderTest.txt_PlanInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.txt_Plan.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'ApplicationUnderTest.Select_Plan' at Center.", repo.ApplicationUnderTest.Select_PlanInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.Select_Plan.MoveTo();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Select_Plan' at Center.", repo.ApplicationUnderTest.Select_PlanInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.Select_Plan.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Btn_Actalizar_Pas2344' at Center.", repo.ApplicationUnderTest.Btn_Actalizar_Pas2344Info, new RecordItemIndex(20));
            repo.ApplicationUnderTest.Btn_Actalizar_Pas2344.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 40s to not exist. Associated repository item: 'ApplicationUnderTest.Copy_of_Btn_Actalizar_Pas2344'", repo.ApplicationUnderTest.Copy_of_Btn_Actalizar_Pas2344Info, new ActionTimeout(40000), new RecordItemIndex(21));
            repo.ApplicationUnderTest.Copy_of_Btn_Actalizar_Pas2344Info.WaitForNotExists(40000);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(22));
            //Delay.Duration(3000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
